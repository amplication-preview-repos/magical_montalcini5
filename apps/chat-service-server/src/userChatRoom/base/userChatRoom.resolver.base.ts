/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserChatRoom } from "./UserChatRoom";
import { UserChatRoomCountArgs } from "./UserChatRoomCountArgs";
import { UserChatRoomFindManyArgs } from "./UserChatRoomFindManyArgs";
import { UserChatRoomFindUniqueArgs } from "./UserChatRoomFindUniqueArgs";
import { CreateUserChatRoomArgs } from "./CreateUserChatRoomArgs";
import { UpdateUserChatRoomArgs } from "./UpdateUserChatRoomArgs";
import { DeleteUserChatRoomArgs } from "./DeleteUserChatRoomArgs";
import { ChatRoom } from "../../chatRoom/base/ChatRoom";
import { User } from "../../user/base/User";
import { UserChatRoomService } from "../userChatRoom.service";
@graphql.Resolver(() => UserChatRoom)
export class UserChatRoomResolverBase {
  constructor(protected readonly service: UserChatRoomService) {}

  async _userChatRoomsMeta(
    @graphql.Args() args: UserChatRoomCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserChatRoom])
  async userChatRooms(
    @graphql.Args() args: UserChatRoomFindManyArgs
  ): Promise<UserChatRoom[]> {
    return this.service.userChatRooms(args);
  }

  @graphql.Query(() => UserChatRoom, { nullable: true })
  async userChatRoom(
    @graphql.Args() args: UserChatRoomFindUniqueArgs
  ): Promise<UserChatRoom | null> {
    const result = await this.service.userChatRoom(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserChatRoom)
  async createUserChatRoom(
    @graphql.Args() args: CreateUserChatRoomArgs
  ): Promise<UserChatRoom> {
    return await this.service.createUserChatRoom({
      ...args,
      data: {
        ...args.data,

        chatRoom: args.data.chatRoom
          ? {
              connect: args.data.chatRoom,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserChatRoom)
  async updateUserChatRoom(
    @graphql.Args() args: UpdateUserChatRoomArgs
  ): Promise<UserChatRoom | null> {
    try {
      return await this.service.updateUserChatRoom({
        ...args,
        data: {
          ...args.data,

          chatRoom: args.data.chatRoom
            ? {
                connect: args.data.chatRoom,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserChatRoom)
  async deleteUserChatRoom(
    @graphql.Args() args: DeleteUserChatRoomArgs
  ): Promise<UserChatRoom | null> {
    try {
      return await this.service.deleteUserChatRoom(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => ChatRoom, {
    nullable: true,
    name: "chatRoom",
  })
  async getChatRoom(
    @graphql.Parent() parent: UserChatRoom
  ): Promise<ChatRoom | null> {
    const result = await this.service.getChatRoom(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: UserChatRoom): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
