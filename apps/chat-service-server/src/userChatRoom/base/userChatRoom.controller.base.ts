/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserChatRoomService } from "../userChatRoom.service";
import { UserChatRoomCreateInput } from "./UserChatRoomCreateInput";
import { UserChatRoom } from "./UserChatRoom";
import { UserChatRoomFindManyArgs } from "./UserChatRoomFindManyArgs";
import { UserChatRoomWhereUniqueInput } from "./UserChatRoomWhereUniqueInput";
import { UserChatRoomUpdateInput } from "./UserChatRoomUpdateInput";

export class UserChatRoomControllerBase {
  constructor(protected readonly service: UserChatRoomService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserChatRoom })
  async createUserChatRoom(
    @common.Body() data: UserChatRoomCreateInput
  ): Promise<UserChatRoom> {
    return await this.service.createUserChatRoom({
      data: {
        ...data,

        chatRoom: data.chatRoom
          ? {
              connect: data.chatRoom,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        chatRoom: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserChatRoom] })
  @ApiNestedQuery(UserChatRoomFindManyArgs)
  async userChatRooms(@common.Req() request: Request): Promise<UserChatRoom[]> {
    const args = plainToClass(UserChatRoomFindManyArgs, request.query);
    return this.service.userChatRooms({
      ...args,
      select: {
        chatRoom: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserChatRoom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userChatRoom(
    @common.Param() params: UserChatRoomWhereUniqueInput
  ): Promise<UserChatRoom | null> {
    const result = await this.service.userChatRoom({
      where: params,
      select: {
        chatRoom: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserChatRoom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserChatRoom(
    @common.Param() params: UserChatRoomWhereUniqueInput,
    @common.Body() data: UserChatRoomUpdateInput
  ): Promise<UserChatRoom | null> {
    try {
      return await this.service.updateUserChatRoom({
        where: params,
        data: {
          ...data,

          chatRoom: data.chatRoom
            ? {
                connect: data.chatRoom,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          chatRoom: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserChatRoom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserChatRoom(
    @common.Param() params: UserChatRoomWhereUniqueInput
  ): Promise<UserChatRoom | null> {
    try {
      return await this.service.deleteUserChatRoom({
        where: params,
        select: {
          chatRoom: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
